// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SchoolCore;

namespace School.Web.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20210922064028_CreateDatabase")]
    partial class CreateDatabase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.10");

            modelBuilder.Entity("SchoolCore.Entities.AClass", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AClassName")
                        .HasColumnType("longtext");

                    b.Property<Guid>("AClassParentId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("AcademicId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("AcademicId");

                    b.ToTable("AClasses");
                });

            modelBuilder.Entity("SchoolCore.Entities.Academic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AcademicName")
                        .HasColumnType("longtext");

                    b.Property<Guid>("AcademicParentId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.ToTable("Academics");
                });

            modelBuilder.Entity("SchoolCore.Entities.AcademicCourse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AcademicId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("AcademicId", "CourseId")
                        .IsUnique();

                    b.ToTable("AcademicAndCourses");
                });

            modelBuilder.Entity("SchoolCore.Entities.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("CourseCapacity")
                        .HasColumnType("int");

                    b.Property<string>("CourseName")
                        .HasColumnType("longtext");

                    b.Property<string>("CourseNumber")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("SchoolCore.Entities.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("DepartmentFunctions")
                        .HasColumnType("longtext");

                    b.Property<string>("DepartmentName")
                        .HasColumnType("longtext");

                    b.Property<Guid>("DepartmentParentId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("SchoolCore.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("RoleName")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleType")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("SchoolCore.Entities.RoleClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("RoleClaimType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("RoleClaimValue")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("SchoolCore.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("AClassId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("IdCardNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("Number")
                        .HasColumnType("longtext");

                    b.Property<string>("Sex")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("UserAcademicId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("UserDepartmentId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("AClassId");

                    b.HasIndex("UserAcademicId");

                    b.HasIndex("UserDepartmentId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SchoolCore.Entities.UserClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("UserClaimType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserClaimValue")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("SchoolCore.Entities.UserCourse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId", "CourseId")
                        .IsUnique();

                    b.ToTable("UserCourses");
                });

            modelBuilder.Entity("SchoolCore.Entities.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("SchoolCore.Entities.AClass", b =>
                {
                    b.HasOne("SchoolCore.Entities.Academic", "Academic")
                        .WithMany("AcademicClass")
                        .HasForeignKey("AcademicId");

                    b.Navigation("Academic");
                });

            modelBuilder.Entity("SchoolCore.Entities.AcademicCourse", b =>
                {
                    b.HasOne("SchoolCore.Entities.Academic", "Academic")
                        .WithMany("AcademicCourses")
                        .HasForeignKey("AcademicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolCore.Entities.Course", "Course")
                        .WithMany("CourseAcademic")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Academic");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("SchoolCore.Entities.RoleClaim", b =>
                {
                    b.HasOne("SchoolCore.Entities.Role", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SchoolCore.Entities.User", b =>
                {
                    b.HasOne("SchoolCore.Entities.AClass", null)
                        .WithMany("AclassUsers")
                        .HasForeignKey("AClassId");

                    b.HasOne("SchoolCore.Entities.Academic", "UserAcademic")
                        .WithMany("AcademicUsers")
                        .HasForeignKey("UserAcademicId");

                    b.HasOne("SchoolCore.Entities.Department", "UserDepartment")
                        .WithMany("DepartmentUsers")
                        .HasForeignKey("UserDepartmentId");

                    b.Navigation("UserAcademic");

                    b.Navigation("UserDepartment");
                });

            modelBuilder.Entity("SchoolCore.Entities.UserClaim", b =>
                {
                    b.HasOne("SchoolCore.Entities.User", "User")
                        .WithMany("UserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SchoolCore.Entities.UserCourse", b =>
                {
                    b.HasOne("SchoolCore.Entities.Course", "Course")
                        .WithMany("CourseMember")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolCore.Entities.User", "User")
                        .WithMany("UserCourse")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SchoolCore.Entities.UserRole", b =>
                {
                    b.HasOne("SchoolCore.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolCore.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SchoolCore.Entities.AClass", b =>
                {
                    b.Navigation("AclassUsers");
                });

            modelBuilder.Entity("SchoolCore.Entities.Academic", b =>
                {
                    b.Navigation("AcademicClass");

                    b.Navigation("AcademicCourses");

                    b.Navigation("AcademicUsers");
                });

            modelBuilder.Entity("SchoolCore.Entities.Course", b =>
                {
                    b.Navigation("CourseAcademic");

                    b.Navigation("CourseMember");
                });

            modelBuilder.Entity("SchoolCore.Entities.Department", b =>
                {
                    b.Navigation("DepartmentUsers");
                });

            modelBuilder.Entity("SchoolCore.Entities.Role", b =>
                {
                    b.Navigation("RoleClaims");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("SchoolCore.Entities.User", b =>
                {
                    b.Navigation("UserClaims");

                    b.Navigation("UserCourse");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
